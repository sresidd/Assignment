//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/TrainInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TrainInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TrainInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TrainInput"",
    ""maps"": [
        {
            ""name"": ""Train Controller"",
            ""id"": ""f0c5baff-d0a5-4add-a319-59a3abf1443b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9d730041-69e9-450a-9104-b31efd74e53f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e3f1cbba-1419-4a73-aa54-3a1a1d211293"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""496890fb-2cf6-4f41-9d24-eebff84e0227"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""46561158-0016-41c1-ac8d-31d93cd4b413"",
                    ""path"": ""<AndroidJoystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""329fd088-9d9d-441a-b472-966a80cb4de5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""82a76833-71aa-4cac-8d92-7b73a905638a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""af3a807c-aa52-487f-9c50-b756ce940a70"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Train Controller
        m_TrainController = asset.FindActionMap("Train Controller", throwIfNotFound: true);
        m_TrainController_Move = m_TrainController.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Train Controller
    private readonly InputActionMap m_TrainController;
    private List<ITrainControllerActions> m_TrainControllerActionsCallbackInterfaces = new List<ITrainControllerActions>();
    private readonly InputAction m_TrainController_Move;
    public struct TrainControllerActions
    {
        private @TrainInput m_Wrapper;
        public TrainControllerActions(@TrainInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TrainController_Move;
        public InputActionMap Get() { return m_Wrapper.m_TrainController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TrainControllerActions set) { return set.Get(); }
        public void AddCallbacks(ITrainControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_TrainControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TrainControllerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ITrainControllerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ITrainControllerActions instance)
        {
            if (m_Wrapper.m_TrainControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITrainControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_TrainControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TrainControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TrainControllerActions @TrainController => new TrainControllerActions(this);
    public interface ITrainControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
